# -*- coding: utf-8 -*-
"""Lab 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ck5_soVAObRih30pC-PC8_5oRm-WVYVC
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Load the dataset
df = pd.read_csv('diabetes_data.csv')
print("\t---- Mausam Thapa ----\n")
print("Dataset shape:", df.shape)
print("\nFirst few rows:")
print(df.head())

# Step 2: Split the data into features and target
X = df.drop(columns='Outcome')
y = df['Outcome']

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Initialize the Naive Bayes classifier
nb_classifier = GaussianNB()

# Step 5: Train the model
nb_classifier.fit(X_train, y_train)

# Step 6: Make predictions
y_pred_nb = nb_classifier.predict(X_test)

# Step 7: Evaluate the model
accuracy_nb = accuracy_score(y_test, y_pred_nb)
print(f"\nNaive Bayes Accuracy: {accuracy_nb:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred_nb))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

print("\t---- Mausam Thapa ----\n")

# Step 1: Load the dataset
df = pd.read_csv('diabetes_data.csv')

# Step 2: Split the data into features and target
X = df.drop(columns='Outcome')
y = df['Outcome']

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Initialize the Decision Tree classifier
dt_classifier = DecisionTreeClassifier(criterion='entropy', random_state=42)

# Step 5: Train the model
dt_classifier.fit(X_train, y_train)

# Step 6: Make predictions
y_pred_dt = dt_classifier.predict(X_test)

# Step 7: Evaluate the model
accuracy_dt = accuracy_score(y_test, y_pred_dt)
print(f"Decision Tree Accuracy: {accuracy_dt:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred_dt))

from sklearn.metrics import confusion_matrix, roc_auc_score

# Calculate confusion matrices
conf_matrix_nb = confusion_matrix(y_test, y_pred_nb)
conf_matrix_dt = confusion_matrix(y_test, y_pred_dt)

# Calculate ROC AUC scores
roc_auc_nb = roc_auc_score(y_test, y_pred_nb)
roc_auc_dt = roc_auc_score(y_test, y_pred_dt)

print("\t---- Mausam Thapa ----\n")

# Print comparison results
print("\nNaive Bayes vs Decision Tree Classifier Performance:\n")
print(f"Naive Bayes Accuracy: {accuracy_nb:.2f}")
print(f"Decision Tree Accuracy: {accuracy_dt:.2f}")
print(f"Naive Bayes ROC AUC: {roc_auc_nb:.2f}")
print(f"Decision Tree ROC AUC: {roc_auc_dt:.2f}")

print("\nConfusion Matrix - Naive Bayes:\n", conf_matrix_nb)
print("\nConfusion Matrix - Decision Tree:\n", conf_matrix_dt)